// Copyright 2024 Nitro Agility S.r.l.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

syntax="proto3";

import "google/protobuf/struct.proto";

package policydecisionpoint;

option go_package = "github.com/permguard/permguard/internal/hosts/api/pdp/v1";

// PolicyStore is the store where the policy is stored
message PolicyStore {
	string Type = 1;
	string ID = 2;
	optional string Version = 3;
}

// Principal is the principal that is making the request
message Principal {
	string Type = 1;
	string ID = 2;
	optional string Source = 3;
	optional string IdentityToken = 4;
	optional string AccessToken = 5;
}

// Entities is the entities that are involved in the request for the policy decision context
message Entities {
	string Schema = 1;
	google.protobuf.Struct Data = 2;
}

// Subject is the subject on which the policy decision is made
message Subject {
	string Type = 1;
	string ID = 2;
	optional string Source = 3;
	optional google.protobuf.Struct Properties = 4;
}

// Resource is the resource on which the policy decision is made
message Resource {
	string Type = 1;
	string ID = 2;
	optional google.protobuf.Struct Properties = 3;
}

// Action is the action on which the policy decision is made
message Action {
	string Name = 1;
	optional google.protobuf.Struct Properties = 2;
}

// AuthorizationCheck request

// AuthorizationContextRequest is the input context for the policy decision
message AuthorizationContextRequest {
	optional PolicyStore PolicyStore = 1;
	optional Principal Principal = 2;
	optional Entities Entities = 3;
}

// EvaluationRequest is the evaluation of the policy decision
message EvaluationRequest {
	optional Subject Subject = 1;
	optional Resource Resource = 2;
	optional Action Action = 3;
	optional google.protobuf.Struct Context = 4;
}

// AuthorizationCheckRequest is the request for the policy decision
message AuthorizationCheckRequest {
	optional AuthorizationContextRequest AuthorizationContext = 1;
	optional Subject Subject = 2;
	optional Resource Resource = 3;
	optional Action Action = 4;
	optional google.protobuf.Struct Context = 5;
	repeated EvaluationRequest Evaluations = 6;
}

// AuthorizationCheck response

// ReasonResponse is the reason for the response
message ReasonResponse {
	string Code = 1;
	string Message = 2;
}

// ContextResponse is the context for the response
message ContextResponse {
	string Id = 1;
	ReasonResponse ReasonAdmin = 2;
	ReasonResponse ReasonUser = 3;
}

// EvaluationResponse is the evaluation of the response
message EvaluationResponse {
	bool Decision = 1;
	ContextResponse Context = 2;
}

// AuthorizationCheckResponse is the response for the policy decision
message AuthorizationCheckResponse {
	bool Decision = 1;
	ContextResponse Context = 2;
	repeated EvaluationResponse Evaluations = 3;
}

// V1PDPService	is the service for the Policy Decision Point
service V1PDPService {
	rpc AuthorizationCheck(AuthorizationCheckRequest) returns (AuthorizationCheckResponse) {}
}
