// Copyright 2024 Nitro Agility S.r.l.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

syntax="proto3";

package policydecisionpoint;

option go_package = "github.com/permguard/permguard/internal/hosts/api/pdp/v1";

message Attribute {
   string key = 1;
   string value = 2;
}

message Identity {
  string uur = 1;
  repeated Attribute attributes = 2;
}

message VirtualState {
   enum VirtualStateView{
      COMBINED = 0;
      UNCOMBINED = 1;
   }
  bool enabled = 1;
	VirtualStateView view = 2;
}

message PermissionsEngine {
  VirtualState virtualState = 1;
}

// Permission state

message PermissionsStateRequest {
  optional PermissionsEngine permissionsEngine = 1;
	Identity identity = 2;
}

message ACPolicyStatement {
  string name = 1;
  repeated string actions = 2;
  repeated string resources = 3;
}

message ACPolicyStatementWrapper {
  ACPolicyStatement statement = 1;
  string statmentHashed = 2;
}

message ACPermissions {
  repeated ACPolicyStatementWrapper forbid = 1;
  repeated ACPolicyStatementWrapper permit = 2;
}

message PermissionsState {
  ACPermissions permissions = 1;
}

message PermissionsStateResponse {
  Identity identity = 1;
  PermissionsState permissionsState = 2;
}

// Permissions evaluation

message PermissionsEvaluation {
  string account = 1;
  string tenant = 2;
  string schema = 3;
  string domain = 4;
  string resource = 5;
  repeated string actions = 6;
}

message PermissionsEvaluationRequest {
  Identity identity = 1;
  repeated PermissionsEvaluation evaluations = 2;
}

message PermissionsEvaluationOutcomeExplanation {
  bool isExplicitlyForbidden = 1;
  bool isImplicitlyForbidden = 2;
}

message PermissionsEvaluationOutcome {
  PermissionsEvaluation evaluation = 1;
  bool permitted = 2;
  PermissionsEvaluationOutcomeExplanation explanation = 3;
}

message PermissionsEvaluationResponse {
  Identity identity = 1;
  repeated PermissionsEvaluationOutcome evaluations = 2;
  bool permitted = 3;
}

// V1PDPService	is the service for the Policy Decision Point
service V1PDPService {
  rpc GetPermissionsState (PermissionsStateRequest) returns (PermissionsStateResponse);
  rpc EvaluatePermissions(PermissionsEvaluationRequest) returns (PermissionsEvaluationResponse);
}
