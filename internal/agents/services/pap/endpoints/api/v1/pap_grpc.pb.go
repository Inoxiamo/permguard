
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: internal/agents/services/pap/endpoints/api/v1/pap.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1PAPService_CreateRepository_FullMethodName   = "/policyadministrationpoint.V1PAPService/CreateRepository"
	V1PAPService_UpdateRepository_FullMethodName   = "/policyadministrationpoint.V1PAPService/UpdateRepository"
	V1PAPService_DeleteRepository_FullMethodName   = "/policyadministrationpoint.V1PAPService/DeleteRepository"
	V1PAPService_GetAllRepositories_FullMethodName = "/policyadministrationpoint.V1PAPService/GetAllRepositories"
	V1PAPService_UpdateSchema_FullMethodName       = "/policyadministrationpoint.V1PAPService/UpdateSchema"
	V1PAPService_GetAllSchemas_FullMethodName      = "/policyadministrationpoint.V1PAPService/GetAllSchemas"
)

// V1PAPServiceClient is the client API for V1PAPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1PAPServiceClient interface {
	// Create an repository
	CreateRepository(ctx context.Context, in *RepositoryCreateRequest, opts ...grpc.CallOption) (*RepositoryResponse, error)
	// Update an repository
	UpdateRepository(ctx context.Context, in *RepositoryUpdateRequest, opts ...grpc.CallOption) (*RepositoryResponse, error)
	// Delete an repository
	DeleteRepository(ctx context.Context, in *RepositoryDeleteRequest, opts ...grpc.CallOption) (*RepositoryResponse, error)
	// Get all repositories
	GetAllRepositories(ctx context.Context, in *RepositoryGetRequest, opts ...grpc.CallOption) (*RepositoryListResponse, error)
	// Update a schema
	UpdateSchema(ctx context.Context, in *SchemaUpdateRequest, opts ...grpc.CallOption) (*SchemaResponse, error)
	// Get all Schemas
	GetAllSchemas(ctx context.Context, in *SchemaGetRequest, opts ...grpc.CallOption) (*SchemaListResponse, error)
}

type v1PAPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewV1PAPServiceClient(cc grpc.ClientConnInterface) V1PAPServiceClient {
	return &v1PAPServiceClient{cc}
}

func (c *v1PAPServiceClient) CreateRepository(ctx context.Context, in *RepositoryCreateRequest, opts ...grpc.CallOption) (*RepositoryResponse, error) {
	out := new(RepositoryResponse)
	err := c.cc.Invoke(ctx, V1PAPService_CreateRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) UpdateRepository(ctx context.Context, in *RepositoryUpdateRequest, opts ...grpc.CallOption) (*RepositoryResponse, error) {
	out := new(RepositoryResponse)
	err := c.cc.Invoke(ctx, V1PAPService_UpdateRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) DeleteRepository(ctx context.Context, in *RepositoryDeleteRequest, opts ...grpc.CallOption) (*RepositoryResponse, error) {
	out := new(RepositoryResponse)
	err := c.cc.Invoke(ctx, V1PAPService_DeleteRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) GetAllRepositories(ctx context.Context, in *RepositoryGetRequest, opts ...grpc.CallOption) (*RepositoryListResponse, error) {
	out := new(RepositoryListResponse)
	err := c.cc.Invoke(ctx, V1PAPService_GetAllRepositories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) UpdateSchema(ctx context.Context, in *SchemaUpdateRequest, opts ...grpc.CallOption) (*SchemaResponse, error) {
	out := new(SchemaResponse)
	err := c.cc.Invoke(ctx, V1PAPService_UpdateSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) GetAllSchemas(ctx context.Context, in *SchemaGetRequest, opts ...grpc.CallOption) (*SchemaListResponse, error) {
	out := new(SchemaListResponse)
	err := c.cc.Invoke(ctx, V1PAPService_GetAllSchemas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1PAPServiceServer is the server API for V1PAPService service.
// All implementations must embed UnimplementedV1PAPServiceServer
// for forward compatibility
type V1PAPServiceServer interface {
	// Create an repository
	CreateRepository(context.Context, *RepositoryCreateRequest) (*RepositoryResponse, error)
	// Update an repository
	UpdateRepository(context.Context, *RepositoryUpdateRequest) (*RepositoryResponse, error)
	// Delete an repository
	DeleteRepository(context.Context, *RepositoryDeleteRequest) (*RepositoryResponse, error)
	// Get all repositories
	GetAllRepositories(context.Context, *RepositoryGetRequest) (*RepositoryListResponse, error)
	// Update a schema
	UpdateSchema(context.Context, *SchemaUpdateRequest) (*SchemaResponse, error)
	// Get all Schemas
	GetAllSchemas(context.Context, *SchemaGetRequest) (*SchemaListResponse, error)
	mustEmbedUnimplementedV1PAPServiceServer()
}

// UnimplementedV1PAPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedV1PAPServiceServer struct {
}

func (UnimplementedV1PAPServiceServer) CreateRepository(context.Context, *RepositoryCreateRequest) (*RepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (UnimplementedV1PAPServiceServer) UpdateRepository(context.Context, *RepositoryUpdateRequest) (*RepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (UnimplementedV1PAPServiceServer) DeleteRepository(context.Context, *RepositoryDeleteRequest) (*RepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (UnimplementedV1PAPServiceServer) GetAllRepositories(context.Context, *RepositoryGetRequest) (*RepositoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRepositories not implemented")
}
func (UnimplementedV1PAPServiceServer) UpdateSchema(context.Context, *SchemaUpdateRequest) (*SchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchema not implemented")
}
func (UnimplementedV1PAPServiceServer) GetAllSchemas(context.Context, *SchemaGetRequest) (*SchemaListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSchemas not implemented")
}
func (UnimplementedV1PAPServiceServer) mustEmbedUnimplementedV1PAPServiceServer() {}

// UnsafeV1PAPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1PAPServiceServer will
// result in compilation errors.
type UnsafeV1PAPServiceServer interface {
	mustEmbedUnimplementedV1PAPServiceServer()
}

func RegisterV1PAPServiceServer(s grpc.ServiceRegistrar, srv V1PAPServiceServer) {
	s.RegisterService(&V1PAPService_ServiceDesc, srv)
}

func _V1PAPService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_CreateRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).CreateRepository(ctx, req.(*RepositoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_UpdateRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).UpdateRepository(ctx, req.(*RepositoryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_DeleteRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).DeleteRepository(ctx, req.(*RepositoryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_GetAllRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).GetAllRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_GetAllRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).GetAllRepositories(ctx, req.(*RepositoryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_UpdateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).UpdateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_UpdateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).UpdateSchema(ctx, req.(*SchemaUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_GetAllSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).GetAllSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_GetAllSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).GetAllSchemas(ctx, req.(*SchemaGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1PAPService_ServiceDesc is the grpc.ServiceDesc for V1PAPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1PAPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policyadministrationpoint.V1PAPService",
	HandlerType: (*V1PAPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepository",
			Handler:    _V1PAPService_CreateRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _V1PAPService_UpdateRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _V1PAPService_DeleteRepository_Handler,
		},
		{
			MethodName: "GetAllRepositories",
			Handler:    _V1PAPService_GetAllRepositories_Handler,
		},
		{
			MethodName: "UpdateSchema",
			Handler:    _V1PAPService_UpdateSchema_Handler,
		},
		{
			MethodName: "GetAllSchemas",
			Handler:    _V1PAPService_GetAllSchemas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/agents/services/pap/endpoints/api/v1/pap.proto",
}
