// Copyright 2024 Nitro Agility S.r.l.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: internal/agents/services/pap/endpoints/api/v1/pap.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	V1PAPService_CreateRepository_FullMethodName  = "/policyadministrationpoint.V1PAPService/CreateRepository"
	V1PAPService_UpdateRepository_FullMethodName  = "/policyadministrationpoint.V1PAPService/UpdateRepository"
	V1PAPService_DeleteRepository_FullMethodName  = "/policyadministrationpoint.V1PAPService/DeleteRepository"
	V1PAPService_FetchRepositories_FullMethodName = "/policyadministrationpoint.V1PAPService/FetchRepositories"
	V1PAPService_Push_FullMethodName              = "/policyadministrationpoint.V1PAPService/Push"
	V1PAPService_Pull_FullMethodName              = "/policyadministrationpoint.V1PAPService/Pull"
	V1PAPService_PullObjects_FullMethodName       = "/policyadministrationpoint.V1PAPService/PullObjects"
)

// V1PAPServiceClient is the client API for V1PAPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// V1PAPService is the service for the Policy Administration Point
type V1PAPServiceClient interface {
	// Create an repository
	CreateRepository(ctx context.Context, in *RepositoryCreateRequest, opts ...grpc.CallOption) (*RepositoryResponse, error)
	// Update an repository
	UpdateRepository(ctx context.Context, in *RepositoryUpdateRequest, opts ...grpc.CallOption) (*RepositoryResponse, error)
	// Delete an repository
	DeleteRepository(ctx context.Context, in *RepositoryDeleteRequest, opts ...grpc.CallOption) (*RepositoryResponse, error)
	// Fetch repositories
	FetchRepositories(ctx context.Context, in *RepositoryFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RepositoryResponse], error)
	// Push commit
	Push(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushRequest, PushResponse], error)
	// Pull commit
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Batch], error)
	// Pull objects
	PullObjects(ctx context.Context, in *PullObjectsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Batch], error)
}

type v1PAPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewV1PAPServiceClient(cc grpc.ClientConnInterface) V1PAPServiceClient {
	return &v1PAPServiceClient{cc}
}

func (c *v1PAPServiceClient) CreateRepository(ctx context.Context, in *RepositoryCreateRequest, opts ...grpc.CallOption) (*RepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepositoryResponse)
	err := c.cc.Invoke(ctx, V1PAPService_CreateRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) UpdateRepository(ctx context.Context, in *RepositoryUpdateRequest, opts ...grpc.CallOption) (*RepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepositoryResponse)
	err := c.cc.Invoke(ctx, V1PAPService_UpdateRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) DeleteRepository(ctx context.Context, in *RepositoryDeleteRequest, opts ...grpc.CallOption) (*RepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepositoryResponse)
	err := c.cc.Invoke(ctx, V1PAPService_DeleteRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1PAPServiceClient) FetchRepositories(ctx context.Context, in *RepositoryFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RepositoryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V1PAPService_ServiceDesc.Streams[0], V1PAPService_FetchRepositories_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RepositoryFetchRequest, RepositoryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_FetchRepositoriesClient = grpc.ServerStreamingClient[RepositoryResponse]

func (c *v1PAPServiceClient) Push(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PushRequest, PushResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V1PAPService_ServiceDesc.Streams[1], V1PAPService_Push_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PushRequest, PushResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_PushClient = grpc.ClientStreamingClient[PushRequest, PushResponse]

func (c *v1PAPServiceClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Batch], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V1PAPService_ServiceDesc.Streams[2], V1PAPService_Pull_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullRequest, Batch]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_PullClient = grpc.ServerStreamingClient[Batch]

func (c *v1PAPServiceClient) PullObjects(ctx context.Context, in *PullObjectsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Batch], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V1PAPService_ServiceDesc.Streams[3], V1PAPService_PullObjects_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullObjectsRequest, Batch]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_PullObjectsClient = grpc.ServerStreamingClient[Batch]

// V1PAPServiceServer is the server API for V1PAPService service.
// All implementations must embed UnimplementedV1PAPServiceServer
// for forward compatibility.
//
// V1PAPService is the service for the Policy Administration Point
type V1PAPServiceServer interface {
	// Create an repository
	CreateRepository(context.Context, *RepositoryCreateRequest) (*RepositoryResponse, error)
	// Update an repository
	UpdateRepository(context.Context, *RepositoryUpdateRequest) (*RepositoryResponse, error)
	// Delete an repository
	DeleteRepository(context.Context, *RepositoryDeleteRequest) (*RepositoryResponse, error)
	// Fetch repositories
	FetchRepositories(*RepositoryFetchRequest, grpc.ServerStreamingServer[RepositoryResponse]) error
	// Push commit
	Push(grpc.ClientStreamingServer[PushRequest, PushResponse]) error
	// Pull commit
	Pull(*PullRequest, grpc.ServerStreamingServer[Batch]) error
	// Pull objects
	PullObjects(*PullObjectsRequest, grpc.ServerStreamingServer[Batch]) error
	mustEmbedUnimplementedV1PAPServiceServer()
}

// UnimplementedV1PAPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedV1PAPServiceServer struct{}

func (UnimplementedV1PAPServiceServer) CreateRepository(context.Context, *RepositoryCreateRequest) (*RepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (UnimplementedV1PAPServiceServer) UpdateRepository(context.Context, *RepositoryUpdateRequest) (*RepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (UnimplementedV1PAPServiceServer) DeleteRepository(context.Context, *RepositoryDeleteRequest) (*RepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (UnimplementedV1PAPServiceServer) FetchRepositories(*RepositoryFetchRequest, grpc.ServerStreamingServer[RepositoryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchRepositories not implemented")
}
func (UnimplementedV1PAPServiceServer) Push(grpc.ClientStreamingServer[PushRequest, PushResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedV1PAPServiceServer) Pull(*PullRequest, grpc.ServerStreamingServer[Batch]) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedV1PAPServiceServer) PullObjects(*PullObjectsRequest, grpc.ServerStreamingServer[Batch]) error {
	return status.Errorf(codes.Unimplemented, "method PullObjects not implemented")
}
func (UnimplementedV1PAPServiceServer) mustEmbedUnimplementedV1PAPServiceServer() {}
func (UnimplementedV1PAPServiceServer) testEmbeddedByValue()                      {}

// UnsafeV1PAPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1PAPServiceServer will
// result in compilation errors.
type UnsafeV1PAPServiceServer interface {
	mustEmbedUnimplementedV1PAPServiceServer()
}

func RegisterV1PAPServiceServer(s grpc.ServiceRegistrar, srv V1PAPServiceServer) {
	// If the following call pancis, it indicates UnimplementedV1PAPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&V1PAPService_ServiceDesc, srv)
}

func _V1PAPService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_CreateRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).CreateRepository(ctx, req.(*RepositoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_UpdateRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).UpdateRepository(ctx, req.(*RepositoryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1PAPServiceServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1PAPService_DeleteRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1PAPServiceServer).DeleteRepository(ctx, req.(*RepositoryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1PAPService_FetchRepositories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepositoryFetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1PAPServiceServer).FetchRepositories(m, &grpc.GenericServerStream[RepositoryFetchRequest, RepositoryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_FetchRepositoriesServer = grpc.ServerStreamingServer[RepositoryResponse]

func _V1PAPService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V1PAPServiceServer).Push(&grpc.GenericServerStream[PushRequest, PushResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_PushServer = grpc.ClientStreamingServer[PushRequest, PushResponse]

func _V1PAPService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1PAPServiceServer).Pull(m, &grpc.GenericServerStream[PullRequest, Batch]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_PullServer = grpc.ServerStreamingServer[Batch]

func _V1PAPService_PullObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1PAPServiceServer).PullObjects(m, &grpc.GenericServerStream[PullObjectsRequest, Batch]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1PAPService_PullObjectsServer = grpc.ServerStreamingServer[Batch]

// V1PAPService_ServiceDesc is the grpc.ServiceDesc for V1PAPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1PAPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "policyadministrationpoint.V1PAPService",
	HandlerType: (*V1PAPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepository",
			Handler:    _V1PAPService_CreateRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _V1PAPService_UpdateRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _V1PAPService_DeleteRepository_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchRepositories",
			Handler:       _V1PAPService_FetchRepositories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _V1PAPService_Push_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _V1PAPService_Pull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullObjects",
			Handler:       _V1PAPService_PullObjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/agents/services/pap/endpoints/api/v1/pap.proto",
}
