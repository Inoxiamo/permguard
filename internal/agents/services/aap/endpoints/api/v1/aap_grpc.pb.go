// Copyright 2024 Nitro Agility S.r.l.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: internal/agents/services/aap/endpoints/api/v1/aap.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	V1AAPService_CreateAccount_FullMethodName        = "/accountadministrationpoint.V1AAPService/CreateAccount"
	V1AAPService_UpdateAccount_FullMethodName        = "/accountadministrationpoint.V1AAPService/UpdateAccount"
	V1AAPService_DeleteAccount_FullMethodName        = "/accountadministrationpoint.V1AAPService/DeleteAccount"
	V1AAPService_FetchAccounts_FullMethodName        = "/accountadministrationpoint.V1AAPService/FetchAccounts"
	V1AAPService_CreateIdentitySource_FullMethodName = "/accountadministrationpoint.V1AAPService/CreateIdentitySource"
	V1AAPService_UpdateIdentitySource_FullMethodName = "/accountadministrationpoint.V1AAPService/UpdateIdentitySource"
	V1AAPService_DeleteIdentitySource_FullMethodName = "/accountadministrationpoint.V1AAPService/DeleteIdentitySource"
	V1AAPService_FetchIdentitySources_FullMethodName = "/accountadministrationpoint.V1AAPService/FetchIdentitySources"
	V1AAPService_CreateIdentity_FullMethodName       = "/accountadministrationpoint.V1AAPService/CreateIdentity"
	V1AAPService_UpdateIdentity_FullMethodName       = "/accountadministrationpoint.V1AAPService/UpdateIdentity"
	V1AAPService_DeleteIdentity_FullMethodName       = "/accountadministrationpoint.V1AAPService/DeleteIdentity"
	V1AAPService_FetchIdentities_FullMethodName      = "/accountadministrationpoint.V1AAPService/FetchIdentities"
	V1AAPService_CreateTenant_FullMethodName         = "/accountadministrationpoint.V1AAPService/CreateTenant"
	V1AAPService_UpdateTenant_FullMethodName         = "/accountadministrationpoint.V1AAPService/UpdateTenant"
	V1AAPService_DeleteTenant_FullMethodName         = "/accountadministrationpoint.V1AAPService/DeleteTenant"
	V1AAPService_FetchTenants_FullMethodName         = "/accountadministrationpoint.V1AAPService/FetchTenants"
)

// V1AAPServiceClient is the client API for V1AAPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// V1AAPService is the service for the Account Administration Point
type V1AAPServiceClient interface {
	// Create an account
	CreateAccount(ctx context.Context, in *AccountCreateRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	// Update an account
	UpdateAccount(ctx context.Context, in *AccountUpdateRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	// Delete an account
	DeleteAccount(ctx context.Context, in *AccountDeleteRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	// Fetch Accounts
	FetchAccounts(ctx context.Context, in *AccountFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AccountResponse], error)
	// Create an identity source
	CreateIdentitySource(ctx context.Context, in *IdentitySourceCreateRequest, opts ...grpc.CallOption) (*IdentitySourceResponse, error)
	// Update an identity source
	UpdateIdentitySource(ctx context.Context, in *IdentitySourceUpdateRequest, opts ...grpc.CallOption) (*IdentitySourceResponse, error)
	// Delete an identity source
	DeleteIdentitySource(ctx context.Context, in *IdentitySourceDeleteRequest, opts ...grpc.CallOption) (*IdentitySourceResponse, error)
	// Fetch identity sources
	FetchIdentitySources(ctx context.Context, in *IdentitySourceFetchRequest, opts ...grpc.CallOption) (*IdentitySourceListResponse, error)
	// Create an identity
	CreateIdentity(ctx context.Context, in *IdentityCreateRequest, opts ...grpc.CallOption) (*IdentityResponse, error)
	// Update an identity
	UpdateIdentity(ctx context.Context, in *IdentityUpdateRequest, opts ...grpc.CallOption) (*IdentityResponse, error)
	// Delete an identity
	DeleteIdentity(ctx context.Context, in *IdentityDeleteRequest, opts ...grpc.CallOption) (*IdentityResponse, error)
	// Fetch Identities
	FetchIdentities(ctx context.Context, in *IdentityFetchRequest, opts ...grpc.CallOption) (*IdentityListResponse, error)
	// Create an tenant
	CreateTenant(ctx context.Context, in *TenantCreateRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	// Update an tenant
	UpdateTenant(ctx context.Context, in *TenantUpdateRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	// Delete an tenant
	DeleteTenant(ctx context.Context, in *TenantDeleteRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	// Fetch Tenants
	FetchTenants(ctx context.Context, in *TenantFetchRequest, opts ...grpc.CallOption) (*TenantListResponse, error)
}

type v1AAPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewV1AAPServiceClient(cc grpc.ClientConnInterface) V1AAPServiceClient {
	return &v1AAPServiceClient{cc}
}

func (c *v1AAPServiceClient) CreateAccount(ctx context.Context, in *AccountCreateRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, V1AAPService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) UpdateAccount(ctx context.Context, in *AccountUpdateRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, V1AAPService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) DeleteAccount(ctx context.Context, in *AccountDeleteRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, V1AAPService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) FetchAccounts(ctx context.Context, in *AccountFetchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AccountResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &V1AAPService_ServiceDesc.Streams[0], V1AAPService_FetchAccounts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AccountFetchRequest, AccountResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1AAPService_FetchAccountsClient = grpc.ServerStreamingClient[AccountResponse]

func (c *v1AAPServiceClient) CreateIdentitySource(ctx context.Context, in *IdentitySourceCreateRequest, opts ...grpc.CallOption) (*IdentitySourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentitySourceResponse)
	err := c.cc.Invoke(ctx, V1AAPService_CreateIdentitySource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) UpdateIdentitySource(ctx context.Context, in *IdentitySourceUpdateRequest, opts ...grpc.CallOption) (*IdentitySourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentitySourceResponse)
	err := c.cc.Invoke(ctx, V1AAPService_UpdateIdentitySource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) DeleteIdentitySource(ctx context.Context, in *IdentitySourceDeleteRequest, opts ...grpc.CallOption) (*IdentitySourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentitySourceResponse)
	err := c.cc.Invoke(ctx, V1AAPService_DeleteIdentitySource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) FetchIdentitySources(ctx context.Context, in *IdentitySourceFetchRequest, opts ...grpc.CallOption) (*IdentitySourceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentitySourceListResponse)
	err := c.cc.Invoke(ctx, V1AAPService_FetchIdentitySources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) CreateIdentity(ctx context.Context, in *IdentityCreateRequest, opts ...grpc.CallOption) (*IdentityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentityResponse)
	err := c.cc.Invoke(ctx, V1AAPService_CreateIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) UpdateIdentity(ctx context.Context, in *IdentityUpdateRequest, opts ...grpc.CallOption) (*IdentityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentityResponse)
	err := c.cc.Invoke(ctx, V1AAPService_UpdateIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) DeleteIdentity(ctx context.Context, in *IdentityDeleteRequest, opts ...grpc.CallOption) (*IdentityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentityResponse)
	err := c.cc.Invoke(ctx, V1AAPService_DeleteIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) FetchIdentities(ctx context.Context, in *IdentityFetchRequest, opts ...grpc.CallOption) (*IdentityListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentityListResponse)
	err := c.cc.Invoke(ctx, V1AAPService_FetchIdentities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) CreateTenant(ctx context.Context, in *TenantCreateRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, V1AAPService_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) UpdateTenant(ctx context.Context, in *TenantUpdateRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, V1AAPService_UpdateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) DeleteTenant(ctx context.Context, in *TenantDeleteRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, V1AAPService_DeleteTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AAPServiceClient) FetchTenants(ctx context.Context, in *TenantFetchRequest, opts ...grpc.CallOption) (*TenantListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantListResponse)
	err := c.cc.Invoke(ctx, V1AAPService_FetchTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1AAPServiceServer is the server API for V1AAPService service.
// All implementations must embed UnimplementedV1AAPServiceServer
// for forward compatibility.
//
// V1AAPService is the service for the Account Administration Point
type V1AAPServiceServer interface {
	// Create an account
	CreateAccount(context.Context, *AccountCreateRequest) (*AccountResponse, error)
	// Update an account
	UpdateAccount(context.Context, *AccountUpdateRequest) (*AccountResponse, error)
	// Delete an account
	DeleteAccount(context.Context, *AccountDeleteRequest) (*AccountResponse, error)
	// Fetch Accounts
	FetchAccounts(*AccountFetchRequest, grpc.ServerStreamingServer[AccountResponse]) error
	// Create an identity source
	CreateIdentitySource(context.Context, *IdentitySourceCreateRequest) (*IdentitySourceResponse, error)
	// Update an identity source
	UpdateIdentitySource(context.Context, *IdentitySourceUpdateRequest) (*IdentitySourceResponse, error)
	// Delete an identity source
	DeleteIdentitySource(context.Context, *IdentitySourceDeleteRequest) (*IdentitySourceResponse, error)
	// Fetch identity sources
	FetchIdentitySources(context.Context, *IdentitySourceFetchRequest) (*IdentitySourceListResponse, error)
	// Create an identity
	CreateIdentity(context.Context, *IdentityCreateRequest) (*IdentityResponse, error)
	// Update an identity
	UpdateIdentity(context.Context, *IdentityUpdateRequest) (*IdentityResponse, error)
	// Delete an identity
	DeleteIdentity(context.Context, *IdentityDeleteRequest) (*IdentityResponse, error)
	// Fetch Identities
	FetchIdentities(context.Context, *IdentityFetchRequest) (*IdentityListResponse, error)
	// Create an tenant
	CreateTenant(context.Context, *TenantCreateRequest) (*TenantResponse, error)
	// Update an tenant
	UpdateTenant(context.Context, *TenantUpdateRequest) (*TenantResponse, error)
	// Delete an tenant
	DeleteTenant(context.Context, *TenantDeleteRequest) (*TenantResponse, error)
	// Fetch Tenants
	FetchTenants(context.Context, *TenantFetchRequest) (*TenantListResponse, error)
	mustEmbedUnimplementedV1AAPServiceServer()
}

// UnimplementedV1AAPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedV1AAPServiceServer struct{}

func (UnimplementedV1AAPServiceServer) CreateAccount(context.Context, *AccountCreateRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedV1AAPServiceServer) UpdateAccount(context.Context, *AccountUpdateRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedV1AAPServiceServer) DeleteAccount(context.Context, *AccountDeleteRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedV1AAPServiceServer) FetchAccounts(*AccountFetchRequest, grpc.ServerStreamingServer[AccountResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FetchAccounts not implemented")
}
func (UnimplementedV1AAPServiceServer) CreateIdentitySource(context.Context, *IdentitySourceCreateRequest) (*IdentitySourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentitySource not implemented")
}
func (UnimplementedV1AAPServiceServer) UpdateIdentitySource(context.Context, *IdentitySourceUpdateRequest) (*IdentitySourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentitySource not implemented")
}
func (UnimplementedV1AAPServiceServer) DeleteIdentitySource(context.Context, *IdentitySourceDeleteRequest) (*IdentitySourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentitySource not implemented")
}
func (UnimplementedV1AAPServiceServer) FetchIdentitySources(context.Context, *IdentitySourceFetchRequest) (*IdentitySourceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchIdentitySources not implemented")
}
func (UnimplementedV1AAPServiceServer) CreateIdentity(context.Context, *IdentityCreateRequest) (*IdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentity not implemented")
}
func (UnimplementedV1AAPServiceServer) UpdateIdentity(context.Context, *IdentityUpdateRequest) (*IdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentity not implemented")
}
func (UnimplementedV1AAPServiceServer) DeleteIdentity(context.Context, *IdentityDeleteRequest) (*IdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentity not implemented")
}
func (UnimplementedV1AAPServiceServer) FetchIdentities(context.Context, *IdentityFetchRequest) (*IdentityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchIdentities not implemented")
}
func (UnimplementedV1AAPServiceServer) CreateTenant(context.Context, *TenantCreateRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedV1AAPServiceServer) UpdateTenant(context.Context, *TenantUpdateRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedV1AAPServiceServer) DeleteTenant(context.Context, *TenantDeleteRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedV1AAPServiceServer) FetchTenants(context.Context, *TenantFetchRequest) (*TenantListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTenants not implemented")
}
func (UnimplementedV1AAPServiceServer) mustEmbedUnimplementedV1AAPServiceServer() {}
func (UnimplementedV1AAPServiceServer) testEmbeddedByValue()                      {}

// UnsafeV1AAPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1AAPServiceServer will
// result in compilation errors.
type UnsafeV1AAPServiceServer interface {
	mustEmbedUnimplementedV1AAPServiceServer()
}

func RegisterV1AAPServiceServer(s grpc.ServiceRegistrar, srv V1AAPServiceServer) {
	// If the following call pancis, it indicates UnimplementedV1AAPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&V1AAPService_ServiceDesc, srv)
}

func _V1AAPService_CreateAccount_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(AccountCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).CreateAccount(ctx, req.(*AccountCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_UpdateAccount_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(AccountUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).UpdateAccount(ctx, req.(*AccountUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_DeleteAccount_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(AccountDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).DeleteAccount(ctx, req.(*AccountDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_FetchAccounts_Handler(srv any, stream grpc.ServerStream) error {
	m := new(AccountFetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1AAPServiceServer).FetchAccounts(m, &grpc.GenericServerStream[AccountFetchRequest, AccountResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type V1AAPService_FetchAccountsServer = grpc.ServerStreamingServer[AccountResponse]

func _V1AAPService_CreateIdentitySource_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(IdentitySourceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).CreateIdentitySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_CreateIdentitySource_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).CreateIdentitySource(ctx, req.(*IdentitySourceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_UpdateIdentitySource_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(IdentitySourceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).UpdateIdentitySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_UpdateIdentitySource_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).UpdateIdentitySource(ctx, req.(*IdentitySourceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_DeleteIdentitySource_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(IdentitySourceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).DeleteIdentitySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_DeleteIdentitySource_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).DeleteIdentitySource(ctx, req.(*IdentitySourceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_FetchIdentitySources_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(IdentitySourceFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).FetchIdentitySources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_FetchIdentitySources_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).FetchIdentitySources(ctx, req.(*IdentitySourceFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_CreateIdentity_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(IdentityCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).CreateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_CreateIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).CreateIdentity(ctx, req.(*IdentityCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_UpdateIdentity_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(IdentityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).UpdateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_UpdateIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).UpdateIdentity(ctx, req.(*IdentityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_DeleteIdentity_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(IdentityDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).DeleteIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_DeleteIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).DeleteIdentity(ctx, req.(*IdentityDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_FetchIdentities_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(IdentityFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).FetchIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_FetchIdentities_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).FetchIdentities(ctx, req.(*IdentityFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_CreateTenant_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(TenantCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).CreateTenant(ctx, req.(*TenantCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_UpdateTenant_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(TenantUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).UpdateTenant(ctx, req.(*TenantUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_DeleteTenant_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(TenantDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).DeleteTenant(ctx, req.(*TenantDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1AAPService_FetchTenants_Handler(srv any, ctx context.Context, dec func(any) error, interceptor grpc.UnaryServerInterceptor) (any, error) {
	in := new(TenantFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AAPServiceServer).FetchTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1AAPService_FetchTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return srv.(V1AAPServiceServer).FetchTenants(ctx, req.(*TenantFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1AAPService_ServiceDesc is the grpc.ServiceDesc for V1AAPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1AAPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accountadministrationpoint.V1AAPService",
	HandlerType: (*V1AAPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _V1AAPService_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _V1AAPService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _V1AAPService_DeleteAccount_Handler,
		},
		{
			MethodName: "CreateIdentitySource",
			Handler:    _V1AAPService_CreateIdentitySource_Handler,
		},
		{
			MethodName: "UpdateIdentitySource",
			Handler:    _V1AAPService_UpdateIdentitySource_Handler,
		},
		{
			MethodName: "DeleteIdentitySource",
			Handler:    _V1AAPService_DeleteIdentitySource_Handler,
		},
		{
			MethodName: "FetchIdentitySources",
			Handler:    _V1AAPService_FetchIdentitySources_Handler,
		},
		{
			MethodName: "CreateIdentity",
			Handler:    _V1AAPService_CreateIdentity_Handler,
		},
		{
			MethodName: "UpdateIdentity",
			Handler:    _V1AAPService_UpdateIdentity_Handler,
		},
		{
			MethodName: "DeleteIdentity",
			Handler:    _V1AAPService_DeleteIdentity_Handler,
		},
		{
			MethodName: "FetchIdentities",
			Handler:    _V1AAPService_FetchIdentities_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _V1AAPService_CreateTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _V1AAPService_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _V1AAPService_DeleteTenant_Handler,
		},
		{
			MethodName: "FetchTenants",
			Handler:    _V1AAPService_FetchTenants_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchAccounts",
			Handler:       _V1AAPService_FetchAccounts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/agents/services/aap/endpoints/api/v1/aap.proto",
}
